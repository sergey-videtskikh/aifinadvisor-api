/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordRequest,
  ChangePasswordResponse,
  ErrorResponse,
  JwtResponse,
  LoginRequest,
  RegisterRequest,
  TelegramUserDto,
} from '../models/index';
import {
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    ChangePasswordResponseFromJSON,
    ChangePasswordResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    JwtResponseFromJSON,
    JwtResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    TelegramUserDtoFromJSON,
    TelegramUserDtoToJSON,
} from '../models/index';

export interface AuthChangePasswordPostRequest {
    changePasswordRequest: ChangePasswordRequest;
}

export interface AuthLoginPostRequest {
    loginRequest: LoginRequest;
}

export interface AuthRegisterPostRequest {
    registerRequest: RegisterRequest;
}

export interface AuthTelegramPostRequest {
    telegramUserDto: TelegramUserDto;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Change user password
     */
    async authChangePasswordPostRaw(requestParameters: AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResponse>> {
        if (requestParameters.changePasswordRequest === null || requestParameters.changePasswordRequest === undefined) {
            throw new runtime.RequiredError('changePasswordRequest','Required parameter requestParameters.changePasswordRequest was null or undefined when calling authChangePasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters.changePasswordRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangePasswordResponseFromJSON(jsonValue));
    }

    /**
     * Change user password
     */
    async authChangePasswordPost(requestParameters: AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResponse> {
        const response = await this.authChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User login
     */
    async authLoginPostRaw(requestParameters: AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling authLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * User login
     */
    async authLoginPost(requestParameters: AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.authLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User registration
     */
    async authRegisterPostRaw(requestParameters: AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.registerRequest === null || requestParameters.registerRequest === undefined) {
            throw new runtime.RequiredError('registerRequest','Required parameter requestParameters.registerRequest was null or undefined when calling authRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters.registerRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User registration
     */
    async authRegisterPost(requestParameters: AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     * Telegram authentication
     */
    async authTelegramPostRaw(requestParameters: AuthTelegramPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters.telegramUserDto === null || requestParameters.telegramUserDto === undefined) {
            throw new runtime.RequiredError('telegramUserDto','Required parameter requestParameters.telegramUserDto was null or undefined when calling authTelegramPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TelegramUserDtoToJSON(requestParameters.telegramUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Telegram authentication
     */
    async authTelegramPost(requestParameters: AuthTelegramPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.authTelegramPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
