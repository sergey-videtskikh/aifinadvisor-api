/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordRequest,
  ChangePasswordResponse,
  JwtResponse,
  LoginRequest,
  ProblemDetails,
  RegisterRequest,
  TelegramUserDto,
} from '../models/index';
import {
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    ChangePasswordResponseFromJSON,
    ChangePasswordResponseToJSON,
    JwtResponseFromJSON,
    JwtResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    TelegramUserDtoFromJSON,
    TelegramUserDtoToJSON,
} from '../models/index';

export interface AuthenticateUserRequest {
    loginRequest: LoginRequest;
}

export interface AuthenticateWithTelegramRequest {
    telegramUserDto: TelegramUserDto;
}

export interface ChangeUserPasswordRequest {
    changePasswordRequest: ChangePasswordRequest;
}

export interface RegisterUserRequest {
    registerRequest: RegisterRequest;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Аутентифицирует пользователя по email и паролю. Возвращает JWT токен для доступа к защищенным эндпоинтам. 
     * @summary User login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authenticateUserRaw(requestParameters: AuthenticateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Аутентифицирует пользователя по email и паролю. Возвращает JWT токен для доступа к защищенным эндпоинтам. 
     * User login
     */
    authenticateUser(requestParameters: AuthenticateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

    /**
     * Аутентификация пользователя через Telegram Web App. Проверяет подлинность данных от Telegram Bot API и создает JWT сессию. 
     * @summary Telegram authentication
     * @param {TelegramUserDto} telegramUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authenticateWithTelegramRaw(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Аутентификация пользователя через Telegram Web App. Проверяет подлинность данных от Telegram Bot API и создает JWT сессию. 
     * Telegram authentication
     */
    authenticateWithTelegram(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

    /**
     * Изменяет пароль аутентифицированного пользователя. Требует подтверждения текущего пароля для безопасности. 
     * @summary Change user password
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResponse>>;

    /**
     * Изменяет пароль аутентифицированного пользователя. Требует подтверждения текущего пароля для безопасности. 
     * Change user password
     */
    changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResponse>;

    /**
     * Выход пользователя из системы. Добавляет JWT токен в черный список для предотвращения дальнейшего использования. 
     * @summary User logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Выход пользователя из системы. Добавляет JWT токен в черный список для предотвращения дальнейшего использования. 
     * User logout
     */
    logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Регистрирует нового пользователя в системе. Создает аккаунт с указанными данными, валидирует email и автоматически выполняет аутентификацию. Возвращает JWT токен для немедленного доступа к защищенным эндпоинтам. 
     * @summary User registration
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Регистрирует нового пользователя в системе. Создает аккаунт с указанными данными, валидирует email и автоматически выполняет аутентификацию. Возвращает JWT токен для немедленного доступа к защищенным эндпоинтам. 
     * User registration
     */
    registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Аутентифицирует пользователя по email и паролю. Возвращает JWT токен для доступа к защищенным эндпоинтам. 
     * User login
     */
    async authenticateUserRaw(requestParameters: AuthenticateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling authenticateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Аутентифицирует пользователя по email и паролю. Возвращает JWT токен для доступа к защищенным эндпоинтам. 
     * User login
     */
    async authenticateUser(requestParameters: AuthenticateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.authenticateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Аутентификация пользователя через Telegram Web App. Проверяет подлинность данных от Telegram Bot API и создает JWT сессию. 
     * Telegram authentication
     */
    async authenticateWithTelegramRaw(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters.telegramUserDto === null || requestParameters.telegramUserDto === undefined) {
            throw new runtime.RequiredError('telegramUserDto','Required parameter requestParameters.telegramUserDto was null or undefined when calling authenticateWithTelegram.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TelegramUserDtoToJSON(requestParameters.telegramUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Аутентификация пользователя через Telegram Web App. Проверяет подлинность данных от Telegram Bot API и создает JWT сессию. 
     * Telegram authentication
     */
    async authenticateWithTelegram(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.authenticateWithTelegramRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Изменяет пароль аутентифицированного пользователя. Требует подтверждения текущего пароля для безопасности. 
     * Change user password
     */
    async changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResponse>> {
        if (requestParameters.changePasswordRequest === null || requestParameters.changePasswordRequest === undefined) {
            throw new runtime.RequiredError('changePasswordRequest','Required parameter requestParameters.changePasswordRequest was null or undefined when calling changeUserPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters.changePasswordRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangePasswordResponseFromJSON(jsonValue));
    }

    /**
     * Изменяет пароль аутентифицированного пользователя. Требует подтверждения текущего пароля для безопасности. 
     * Change user password
     */
    async changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResponse> {
        const response = await this.changeUserPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Выход пользователя из системы. Добавляет JWT токен в черный список для предотвращения дальнейшего использования. 
     * User logout
     */
    async logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Выход пользователя из системы. Добавляет JWT токен в черный список для предотвращения дальнейшего использования. 
     * User logout
     */
    async logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutUserRaw(initOverrides);
    }

    /**
     * Регистрирует нового пользователя в системе. Создает аккаунт с указанными данными, валидирует email и автоматически выполняет аутентификацию. Возвращает JWT токен для немедленного доступа к защищенным эндпоинтам. 
     * User registration
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters.registerRequest === null || requestParameters.registerRequest === undefined) {
            throw new runtime.RequiredError('registerRequest','Required parameter requestParameters.registerRequest was null or undefined when calling registerUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters.registerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Регистрирует нового пользователя в системе. Создает аккаунт с указанными данными, валидирует email и автоматически выполняет аутентификацию. Возвращает JWT токен для немедленного доступа к защищенным эндпоинтам. 
     * User registration
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
