/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.PagedReceiptResponse;
import com.finapp.api.model.ProblemDetails;
import com.finapp.api.model.ReceiptResponse;
import java.util.UUID;
import com.finapp.api.model.UpdateReceiptRequest;
import com.finapp.api.model.UploadReceiptResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-24T19:20:01.059020+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Receipts", description = "the Receipts API")
public interface ReceiptsApi {

    /**
     * DELETE /receipts/{id} : Delete receipt
     * Удаляет чек и связанный с ним файл. 
     *
     * @param id Receipt ID (required)
     * @return Receipt deleted successfully (status code 204)
     *         or Receipt not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteReceipt",
        summary = "Delete receipt",
        description = "Удаляет чек и связанный с ним файл. ",
        tags = { "Receipts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Receipt deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Receipt not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/receipts/{id}",
        produces = { "application/problem+json" }
    )
    
    ResponseEntity<Void> deleteReceipt(
        @Parameter(name = "id", description = "Receipt ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /receipts/{id}/download : Download receipt file
     * Скачивает файл чека. 
     *
     * @param id Receipt ID (required)
     * @return Receipt file (status code 200)
     *         or Receipt not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "downloadReceipt",
        summary = "Download receipt file",
        description = "Скачивает файл чека. ",
        tags = { "Receipts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Receipt file", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Receipt not found", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/receipts/{id}/download",
        produces = { "application/octet-stream", "image/*", "application/pdf", "application/problem+json" }
    )
    
    ResponseEntity<org.springframework.core.io.Resource> downloadReceipt(
        @Parameter(name = "id", description = "Receipt ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /receipts/{id} : Get receipt by ID
     * Получает информацию о чеке по его идентификатору. 
     *
     * @param id Receipt ID (required)
     * @return Receipt details (status code 200)
     *         or Receipt not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getReceiptById",
        summary = "Get receipt by ID",
        description = "Получает информацию о чеке по его идентификатору. ",
        tags = { "Receipts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Receipt details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReceiptResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ReceiptResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Receipt not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/receipts/{id}",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<ReceiptResponse> getReceiptById(
        @Parameter(name = "id", description = "Receipt ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /receipts : Get receipts list
     * Получает пагинированный список чеков пользователя. 
     *
     * @param page Page number (0-based) (optional, default to 0)
     * @param size Page size (optional, default to 20)
     * @param transactionId Filter by transaction ID (optional)
     * @return Receipts list (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getReceipts",
        summary = "Get receipts list",
        description = "Получает пагинированный список чеков пользователя. ",
        tags = { "Receipts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Receipts list", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PagedReceiptResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = PagedReceiptResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/receipts",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<PagedReceiptResponse> getReceipts(
        @Min(0) @Parameter(name = "page", description = "Page number (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "transactionId", description = "Filter by transaction ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transactionId", required = false) UUID transactionId
    );


    /**
     * PUT /receipts/{id} : Update receipt
     * Обновляет информацию о чеке. 
     *
     * @param id Receipt ID (required)
     * @param updateReceiptRequest  (required)
     * @return Receipt updated successfully (status code 200)
     *         or Receipt not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateReceipt",
        summary = "Update receipt",
        description = "Обновляет информацию о чеке. ",
        tags = { "Receipts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Receipt updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReceiptResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ReceiptResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Receipt not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/receipts/{id}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ReceiptResponse> updateReceipt(
        @Parameter(name = "id", description = "Receipt ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateReceiptRequest", description = "", required = true) @Valid @RequestBody UpdateReceiptRequest updateReceiptRequest
    );


    /**
     * POST /receipts : Upload receipt
     * Загружает файл чека (изображение или PDF) с возможностью привязки к транзакции. 
     *
     * @param file Файл чека (изображение или PDF) (required)
     * @param transactionId ID транзакции для привязки (optional)
     * @param description Описание чека (optional)
     * @return Receipt uploaded successfully (status code 201)
     *         or Invalid file format (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "uploadReceipt",
        summary = "Upload receipt",
        description = "Загружает файл чека (изображение или PDF) с возможностью привязки к транзакции. ",
        tags = { "Receipts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Receipt uploaded successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadReceiptResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = UploadReceiptResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid file format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/receipts",
        produces = { "application/json", "application/problem+json" },
        consumes = { "multipart/form-data" }
    )
    
    ResponseEntity<UploadReceiptResponse> uploadReceipt(
        @Parameter(name = "file", description = "Файл чека (изображение или PDF)", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "transactionId", description = "ID транзакции для привязки") @Valid @RequestParam(value = "transactionId", required = false) UUID transactionId,
        @Parameter(name = "description", description = "Описание чека") @Valid @RequestParam(value = "description", required = false) String description
    );

}
