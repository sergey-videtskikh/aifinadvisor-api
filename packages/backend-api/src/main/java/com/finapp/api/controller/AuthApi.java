/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.ChangePasswordRequest;
import com.finapp.api.model.ChangePasswordResponse;
import com.finapp.api.model.JwtResponse;
import com.finapp.api.model.LoginRequest;
import com.finapp.api.model.ProblemDetails;
import com.finapp.api.model.RegisterRequest;
import com.finapp.api.model.TelegramUserDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-27T12:48:48.819441954Z[Etc/UTC]")
@Validated
@Tag(name = "Authentication", description = "the Authentication API")
public interface AuthApi {

    /**
     * POST /auth/login : User login
     * Аутентифицирует пользователя по email и паролю. Возвращает JWT токен для доступа к защищенным эндпоинтам. 
     *
     * @param loginRequest  (required)
     * @return Successful authentication (status code 200)
     *         or Invalid credentials (status code 401)
     */
    @Operation(
        operationId = "authenticateUser",
        summary = "User login",
        description = "Аутентифицирует пользователя по email и паролю. Возвращает JWT токен для доступа к защищенным эндпоинтам. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful authentication", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = JwtResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid credentials", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<JwtResponse> authenticateUser(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    );


    /**
     * POST /auth/telegram : Telegram authentication
     * Аутентификация пользователя через Telegram Web App. Проверяет подлинность данных от Telegram Bot API и создает JWT сессию. 
     *
     * @param telegramUserDto  (required)
     * @return Successful authentication (status code 200)
     *         or Telegram authentication error (status code 401)
     */
    @Operation(
        operationId = "authenticateWithTelegram",
        summary = "Telegram authentication",
        description = "Аутентификация пользователя через Telegram Web App. Проверяет подлинность данных от Telegram Bot API и создает JWT сессию. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful authentication", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = JwtResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Telegram authentication error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/telegram",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<JwtResponse> authenticateWithTelegram(
        @Parameter(name = "TelegramUserDto", description = "", required = true) @Valid @RequestBody TelegramUserDto telegramUserDto
    );


    /**
     * POST /auth/change-password : Change user password
     * Изменяет пароль аутентифицированного пользователя. Требует подтверждения текущего пароля для безопасности. 
     *
     * @param changePasswordRequest  (required)
     * @return Password successfully changed (status code 200)
     *         or Validation error (status code 400)
     *         or Unauthorized access (status code 401)
     */
    @Operation(
        operationId = "changeUserPassword",
        summary = "Change user password",
        description = "Изменяет пароль аутентифицированного пользователя. Требует подтверждения текущего пароля для безопасности. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Password successfully changed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChangePasswordResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChangePasswordResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/change-password",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ChangePasswordResponse> changeUserPassword(
        @Parameter(name = "ChangePasswordRequest", description = "", required = true) @Valid @RequestBody ChangePasswordRequest changePasswordRequest
    );


    /**
     * POST /auth/logout : User logout
     * Выход пользователя из системы. Добавляет JWT токен в черный список для предотвращения дальнейшего использования. 
     *
     * @return Successfully logged out (status code 204)
     *         or Invalid or expired token (status code 401)
     */
    @Operation(
        operationId = "logoutUser",
        summary = "User logout",
        description = "Выход пользователя из системы. Добавляет JWT токен в черный список для предотвращения дальнейшего использования. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully logged out"),
            @ApiResponse(responseCode = "401", description = "Invalid or expired token", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/logout",
        produces = { "application/problem+json" }
    )
    
    ResponseEntity<Void> logoutUser(
        
    );


    /**
     * POST /auth/register : User registration
     * Регистрирует нового пользователя в системе. Создает аккаунт с указанными данными, валидирует email и автоматически выполняет аутентификацию. Возвращает JWT токен для немедленного доступа к защищенным эндпоинтам. 
     *
     * @param registerRequest  (required)
     * @return User successfully registered and authenticated (status code 201)
     *         or Validation error (status code 400)
     *         or User already exists (status code 409)
     */
    @Operation(
        operationId = "registerUser",
        summary = "User registration",
        description = "Регистрирует нового пользователя в системе. Создает аккаунт с указанными данными, валидирует email и автоматически выполняет аутентификацию. Возвращает JWT токен для немедленного доступа к защищенным эндпоинтам. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User successfully registered and authenticated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = JwtResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "409", description = "User already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<JwtResponse> registerUser(
        @Parameter(name = "RegisterRequest", description = "", required = true) @Valid @RequestBody RegisterRequest registerRequest
    );

}
