/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.CreateTransactionRequest;
import org.springframework.format.annotation.DateTimeFormat;
import com.finapp.api.model.ImportBatchSummary;
import com.finapp.api.model.ImportHistoryResponse;
import com.finapp.api.model.ImportTransactionResponse;
import java.time.LocalDate;
import com.finapp.api.model.PagedTransactionsResponse;
import com.finapp.api.model.PatchTransactionRequest;
import com.finapp.api.model.ProblemDetails;
import com.finapp.api.model.TransactionDto;
import com.finapp.api.model.TransactionType;
import java.util.UUID;
import com.finapp.api.model.UpdateTransactionRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-24T19:20:01.059020+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Transactions", description = "the Transactions API")
public interface TransactionsApi {

    /**
     * POST /transactions : Create new transaction
     * Создает новую транзакцию с указанными параметрами. Поддерживает доходы, расходы и переводы между счетами. 
     *
     * @param createTransactionRequest  (required)
     * @return Transaction created (status code 201)
     *         or Validation error (status code 400)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "Create new transaction",
        description = "Создает новую транзакцию с указанными параметрами. Поддерживает доходы, расходы и переводы между счетами. ",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Transaction created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TransactionDto> createTransaction(
        @Parameter(name = "CreateTransactionRequest", description = "", required = true) @Valid @RequestBody CreateTransactionRequest createTransactionRequest
    );


    /**
     * DELETE /transactions/{id} : Delete transaction
     * Удаляет транзакцию из системы. Операция необратима и влияет на все связанные отчеты и аналитику. 
     *
     * @param id Уникальный идентификатор транзакции (required)
     * @return Transaction deleted successfully (status code 204)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "deleteTransaction",
        summary = "Delete transaction",
        description = "Удаляет транзакцию из системы. Операция необратима и влияет на все связанные отчеты и аналитику. ",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Transaction deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/transactions/{id}",
        produces = { "application/problem+json" }
    )
    
    ResponseEntity<Void> deleteTransaction(
        @Parameter(name = "id", description = "Уникальный идентификатор транзакции", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /transactions/template : Download Excel template
     * Скачивает предварительно настроенный Excel файл шаблона для заполнения транзакций.  **Структура шаблона:** - Дата (формат: YYYY-MM-DD) - Сумма (числовое значение) - Тип (INCOME/EXPENSE) - Категория (название категории) - Описание (текстовое описание транзакции) - Счет (ID или название счета) 
     *
     * @return Excel template file (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "downloadTransactionTemplate",
        summary = "Download Excel template",
        description = "Скачивает предварительно настроенный Excel файл шаблона для заполнения транзакций.  **Структура шаблона:** - Дата (формат: YYYY-MM-DD) - Сумма (числовое значение) - Тип (INCOME/EXPENSE) - Категория (название категории) - Описание (текстовое описание транзакции) - Счет (ID или название счета) ",
        tags = { "ImportExport" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Excel template file", content = {
                @Content(mediaType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/template",
        produces = { "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/problem+json" }
    )
    
    ResponseEntity<org.springframework.core.io.Resource> downloadTransactionTemplate(
        
    );


    /**
     * GET /transactions/import/history : Get import history
     * Возвращает историю импорта транзакций пользователя. 
     *
     * @param page Page number (0-based) (optional, default to 0)
     * @param size Page size (optional, default to 20)
     * @return Import history (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getImportHistory",
        summary = "Get import history",
        description = "Возвращает историю импорта транзакций пользователя. ",
        tags = { "ImportExport" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Import history", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImportHistoryResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ImportHistoryResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/import/history",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<ImportHistoryResponse> getImportHistory(
        @Min(0) @Parameter(name = "page", description = "Page number (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /transactions/import/{importId} : Get import result
     * Получает детальную информацию о результате конкретного импорта. 
     *
     * @param importId Import ID (required)
     * @return Import result details (status code 200)
     *         or Import not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getImportResult",
        summary = "Get import result",
        description = "Получает детальную информацию о результате конкретного импорта. ",
        tags = { "ImportExport" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Import result details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImportBatchSummary.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ImportBatchSummary.class))
            }),
            @ApiResponse(responseCode = "404", description = "Import not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/import/{importId}",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<ImportBatchSummary> getImportResult(
        @Parameter(name = "importId", description = "Import ID", required = true, in = ParameterIn.PATH) @PathVariable("importId") UUID importId
    );


    /**
     * GET /transactions/{id} : Get transaction by ID
     * Получает детали конкретной транзакции по её идентификатору. Возвращает ETag для поддержки оптимистичной блокировки. 
     *
     * @param id Уникальный идентификатор транзакции (required)
     * @return Transaction details (status code 200)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "getTransactionById",
        summary = "Get transaction by ID",
        description = "Получает детали конкретной транзакции по её идентификатору. Возвращает ETag для поддержки оптимистичной блокировки. ",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/{id}",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<TransactionDto> getTransactionById(
        @Parameter(name = "id", description = "Уникальный идентификатор транзакции", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /transactions : Get transactions list
     * Получить пагинированный список транзакций с возможностью сортировки
     *
     * @param page Номер страницы (начиная с 0) (optional, default to 0)
     * @param size Размер страницы (optional, default to 20)
     * @param sort Критерии сортировки в формате &#39;field,direction&#39; (optional, default to date,desc)
     * @param categoryId Фильтр по ID категории (optional)
     * @param type Фильтр по типу транзакции (optional)
     * @param startDate Начальная дата периода в формате YYYY-MM-DD (optional)
     * @param endDate Конечная дата периода в формате YYYY-MM-DD (optional)
     * @param excluded Включать исключенные транзакции (optional, default to false)
     * @return Transactions list (status code 200)
     *         or Invalid pagination parameters (status code 400)
     */
    @Operation(
        operationId = "getTransactions",
        summary = "Get transactions list",
        description = "Получить пагинированный список транзакций с возможностью сортировки",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transactions list", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PagedTransactionsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = PagedTransactionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid pagination parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<PagedTransactionsResponse> getTransactions(
        @Min(0) @Parameter(name = "page", description = "Номер страницы (начиная с 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Размер страницы", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Критерии сортировки в формате 'field,direction'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false, defaultValue = "date,desc") String sort,
        @Parameter(name = "categoryId", description = "Фильтр по ID категории", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) UUID categoryId,
        @Parameter(name = "type", description = "Фильтр по типу транзакции", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) TransactionType type,
        @Parameter(name = "startDate", description = "Начальная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Конечная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "excluded", description = "Включать исключенные транзакции", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excluded", required = false, defaultValue = "false") Boolean excluded
    );


    /**
     * POST /transactions/import : Import transactions from Excel
     * Импортирует транзакции из загруженного Excel файла. Возвращает результат импорта с количеством успешных записей и ошибок. 
     *
     * @param file Excel файл с транзакциями (required)
     * @param skipFirstRow Пропустить первую строку (заголовки) (optional, default to true)
     * @return Import completed (status code 200)
     *         or Invalid file format or structure (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "importTransactions",
        summary = "Import transactions from Excel",
        description = "Импортирует транзакции из загруженного Excel файла. Возвращает результат импорта с количеством успешных записей и ошибок. ",
        tags = { "ImportExport" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Import completed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImportTransactionResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ImportTransactionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid file format or structure", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions/import",
        produces = { "application/json", "application/problem+json" },
        consumes = { "multipart/form-data" }
    )
    
    ResponseEntity<ImportTransactionResponse> importTransactions(
        @Parameter(name = "file", description = "Excel файл с транзакциями", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "skipFirstRow", description = "Пропустить первую строку (заголовки)") @Valid @RequestParam(value = "skipFirstRow", required = false) Boolean skipFirstRow
    );


    /**
     * PATCH /transactions/{id} : Partially update transaction
     * Частичное обновление транзакции с поддержкой оптимистичной блокировки. Обновляет только переданные поля, остальные остаются без изменений. 
     *
     * @param id Уникальный идентификатор транзакции (required)
     * @param ifMatch ETag для оптимистичной блокировки (required)
     * @param patchTransactionRequest  (required)
     * @return Transaction partially updated (status code 200)
     *         or Invalid request data (status code 400)
     *         or Transaction not found (status code 404)
     *         or Precondition Failed - ETag mismatch (status code 412)
     */
    @Operation(
        operationId = "patchTransaction",
        summary = "Partially update transaction",
        description = "Частичное обновление транзакции с поддержкой оптимистичной блокировки. Обновляет только переданные поля, остальные остаются без изменений. ",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction partially updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "412", description = "Precondition Failed - ETag mismatch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/transactions/{id}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TransactionDto> patchTransaction(
        @Parameter(name = "id", description = "Уникальный идентификатор транзакции", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @NotNull @Parameter(name = "If-Match", description = "ETag для оптимистичной блокировки", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch,
        @Parameter(name = "PatchTransactionRequest", description = "", required = true) @Valid @RequestBody PatchTransactionRequest patchTransactionRequest
    );


    /**
     * PUT /transactions/{id} : Update transaction
     * Полное обновление существующей транзакции. Заменяет все поля транзакции новыми значениями. 
     *
     * @param id  (required)
     * @param updateTransactionRequest  (required)
     * @return Transaction updated (status code 200)
     *         or Invalid request data (status code 400)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "updateTransaction",
        summary = "Update transaction",
        description = "Полное обновление существующей транзакции. Заменяет все поля транзакции новыми значениями. ",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transactions/{id}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TransactionDto> updateTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateTransactionRequest", description = "", required = true) @Valid @RequestBody UpdateTransactionRequest updateTransactionRequest
    );

}
