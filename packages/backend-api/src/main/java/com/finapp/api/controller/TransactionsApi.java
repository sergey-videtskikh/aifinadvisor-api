/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.CreateTransactionRequest;
import com.finapp.api.model.ErrorResponse;
import com.finapp.api.model.PagedTransactionsResponse;
import com.finapp.api.model.ProblemDetails;
import com.finapp.api.model.TransactionDto;
import com.finapp.api.model.TransactionType;
import java.util.UUID;
import com.finapp.api.model.UpdateTransactionRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-24T09:51:35.301899+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Transactions", description = "the Transactions API")
public interface TransactionsApi {

    /**
     * POST /transactions : Create new transaction
     *
     * @param createTransactionRequest  (required)
     * @return Transaction created (status code 201)
     *         or Validation error (status code 400)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "Create new transaction",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Transaction created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TransactionDto> createTransaction(
        @Parameter(name = "CreateTransactionRequest", description = "", required = true) @Valid @RequestBody CreateTransactionRequest createTransactionRequest
    );


    /**
     * GET /transactions : Get transactions list
     * Получить пагинированный список транзакций с возможностью сортировки
     *
     * @param page Номер страницы (начиная с 0) (optional, default to 0)
     * @param size Размер страницы (optional, default to 20)
     * @param sort Критерии сортировки в формате &#39;field,direction&#39; (optional, default to date,desc)
     * @param categoryId Фильтр по ID категории (optional)
     * @param type Фильтр по типу транзакции (optional)
     * @return Transactions list (status code 200)
     *         or Invalid pagination parameters (status code 400)
     */
    @Operation(
        operationId = "getTransactions",
        summary = "Get transactions list",
        description = "Получить пагинированный список транзакций с возможностью сортировки",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transactions list", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PagedTransactionsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = PagedTransactionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid pagination parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<PagedTransactionsResponse> getTransactions(
        @Min(0) @Parameter(name = "page", description = "Номер страницы (начиная с 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Размер страницы", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Критерии сортировки в формате 'field,direction'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false, defaultValue = "date,desc") String sort,
        @Parameter(name = "categoryId", description = "Фильтр по ID категории", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) UUID categoryId,
        @Parameter(name = "type", description = "Фильтр по типу транзакции", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) TransactionType type
    );


    /**
     * PUT /transactions/{id} : Update transaction
     *
     * @param id  (required)
     * @param updateTransactionRequest  (required)
     * @return Transaction updated (status code 200)
     *         or Invalid request data (status code 400)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "updateTransaction",
        summary = "Update transaction",
        tags = { "Transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transactions/{id}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TransactionDto> updateTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateTransactionRequest", description = "", required = true) @Valid @RequestBody UpdateTransactionRequest updateTransactionRequest
    );

}
