/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.ProblemDetails;
import com.finapp.api.model.UserResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-27T14:18:21.767051747Z[Etc/UTC]")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * GET /user/me : Get current user information
     * Возвращает детальную информацию об аутентифицированном пользователе. Включает профиль, настройки и основную статистику. 
     *
     * @return User information (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getCurrentUser",
        summary = "Get current user information",
        description = "Возвращает детальную информацию об аутентифицированном пользователе. Включает профиль, настройки и основную статистику. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/me",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<UserResponse> getCurrentUser(
        
    );

}
