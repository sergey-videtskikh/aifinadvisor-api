/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.CategoryDto;
import com.finapp.api.model.CreateCategoryRequest;
import com.finapp.api.model.ProblemDetails;
import java.util.UUID;
import com.finapp.api.model.UpdateCategoryRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-09T19:39:04.913677996Z[Etc/UTC]")
@Validated
@Tag(name = "Categories", description = "the Categories API")
public interface CategoriesApi {

    /**
     * POST /categories : Create new category
     * Создает новую категорию для классификации транзакций. Поддерживает создание подкатегорий и настройку иконок. 
     *
     * @param createCategoryRequest  (required)
     * @return Category created (status code 201)
     *         or Invalid request data (status code 400)
     *         or Category name already exists (status code 409)
     */
    @Operation(
        operationId = "createCategory",
        summary = "Create new category",
        description = "Создает новую категорию для классификации транзакций. Поддерживает создание подкатегорий и настройку иконок. ",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Category created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = CategoryDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "409", description = "Category name already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/categories",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<CategoryDto> createCategory(
        @Parameter(name = "CreateCategoryRequest", description = "", required = true) @Valid @RequestBody CreateCategoryRequest createCategoryRequest
    );


    /**
     * DELETE /categories/{id} : Delete category
     * Удаляет категорию. Если в категории есть транзакции, они будут перенесены в категорию \&quot;Без категории\&quot;. 
     *
     * @param id Category ID (required)
     * @return Category deleted successfully (status code 204)
     *         or Category not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Delete category",
        description = "Удаляет категорию. Если в категории есть транзакции, они будут перенесены в категорию \"Без категории\". ",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Category deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Category not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/categories/{id}",
        produces = { "application/problem+json" }
    )
    
    ResponseEntity<Void> deleteCategory(
        @Parameter(name = "id", description = "Category ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /categories : Get categories list
     * Получает список всех категорий пользователя. Возвращает иерархическую структуру с подкатегориями. 
     *
     * @return Categories list (status code 200)
     *         or Unauthorized access (status code 401)
     */
    @Operation(
        operationId = "getCategories",
        summary = "Get categories list",
        description = "Получает список всех категорий пользователя. Возвращает иерархическую структуру с подкатегориями. ",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Categories list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CategoryDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = CategoryDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<List<CategoryDto>> getCategories(
        
    );


    /**
     * GET /categories/{id} : Get category by ID
     * Получает детальную информацию о категории по её идентификатору. 
     *
     * @param id Category ID (required)
     * @return Category details (status code 200)
     *         or Category not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Get category by ID",
        description = "Получает детальную информацию о категории по её идентификатору. ",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = CategoryDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Category not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories/{id}",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<CategoryDto> getCategoryById(
        @Parameter(name = "id", description = "Category ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * PUT /categories/{id} : Update category
     * Полностью обновляет данные категории. 
     *
     * @param id Category ID (required)
     * @param updateCategoryRequest  (required)
     * @return Category updated successfully (status code 200)
     *         or Category not found (status code 404)
     *         or Invalid request data (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update category",
        description = "Полностью обновляет данные категории. ",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = CategoryDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Category not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/categories/{id}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<CategoryDto> updateCategory(
        @Parameter(name = "id", description = "Category ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateCategoryRequest", description = "", required = true) @Valid @RequestBody UpdateCategoryRequest updateCategoryRequest
    );

}
