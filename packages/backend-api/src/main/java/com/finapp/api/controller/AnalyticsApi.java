/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.AnalyticsResponse;
import com.finapp.api.model.CategoryAnalyticsResponse;
import com.finapp.api.model.DailyTransactionsResponse;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import com.finapp.api.model.PeriodSummaryResponse;
import com.finapp.api.model.ProblemDetails;
import com.finapp.api.model.TransactionType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-21T10:50:17.094476136Z[Etc/UTC]")
@Validated
@Tag(name = "Analytics", description = "the Analytics API")
public interface AnalyticsApi {

    /**
     * GET /analytics : Get analytics data
     * Возвращает аналитическую информацию о доходах, расходах, балансе и последних транзакциях за указанный период. По умолчанию, период составляет последний год. 
     *
     * @param startDate Начальная дата периода в формате YYYY-MM-DD (optional)
     * @param endDate Конечная дата периода в формате YYYY-MM-DD (optional)
     * @return Analytics data (status code 200)
     *         or Invalid parameters (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getAnalytics",
        summary = "Get analytics data",
        description = "Возвращает аналитическую информацию о доходах, расходах, балансе и последних транзакциях за указанный период. По умолчанию, период составляет последний год. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Analytics data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalyticsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = AnalyticsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analytics",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<AnalyticsResponse> getAnalytics(
        @Parameter(name = "startDate", description = "Начальная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Конечная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    );


    /**
     * GET /analytics/categories : Get categories analytics
     * Возвращает аналитику по категориям - доходы и расходы сгруппированные по категориям за период. 
     *
     * @param startDate Начальная дата периода в формате YYYY-MM-DD (optional)
     * @param endDate Конечная дата периода в формате YYYY-MM-DD (optional)
     * @param type Тип транзакций для анализа (optional)
     * @return Categories analytics (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getCategoriesAnalytics",
        summary = "Get categories analytics",
        description = "Возвращает аналитику по категориям - доходы и расходы сгруппированные по категориям за период. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Categories analytics", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryAnalyticsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = CategoryAnalyticsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analytics/categories",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<CategoryAnalyticsResponse> getCategoriesAnalytics(
        @Parameter(name = "startDate", description = "Начальная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Конечная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "type", description = "Тип транзакций для анализа", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) TransactionType type
    );


    /**
     * GET /analytics/daily : Get daily transactions
     * Возвращает ежедневную статистику транзакций за период с группировкой по дням. 
     *
     * @param startDate Начальная дата периода в формате YYYY-MM-DD (optional)
     * @param endDate Конечная дата периода в формате YYYY-MM-DD (optional)
     * @return Daily transactions statistics (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getDailyTransactions",
        summary = "Get daily transactions",
        description = "Возвращает ежедневную статистику транзакций за период с группировкой по дням. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Daily transactions statistics", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DailyTransactionsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = DailyTransactionsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analytics/daily",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<DailyTransactionsResponse> getDailyTransactions(
        @Parameter(name = "startDate", description = "Начальная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Конечная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    );


    /**
     * GET /analytics/summary : Get period summary
     * Возвращает сводную аналитику за указанный период с группировкой по месяцам. 
     *
     * @param startDate Начальная дата периода в формате YYYY-MM-DD (optional)
     * @param endDate Конечная дата периода в формате YYYY-MM-DD (optional)
     * @return Period summary (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getPeriodSummary",
        summary = "Get period summary",
        description = "Возвращает сводную аналитику за указанный период с группировкой по месяцам. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Period summary", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PeriodSummaryResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = PeriodSummaryResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analytics/summary",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<PeriodSummaryResponse> getPeriodSummary(
        @Parameter(name = "startDate", description = "Начальная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Конечная дата периода в формате YYYY-MM-DD", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    );

}
