/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.finapp.api.controller;

import com.finapp.api.model.CategoryDto;
import com.finapp.api.model.CategoryIconsResponse;
import com.finapp.api.model.Currency;
import com.finapp.api.model.DefaultCategoryDto;
import com.finapp.api.model.ProblemDetails;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-21T10:50:17.094476136Z[Etc/UTC]")
@Validated
@Tag(name = "Dictionaries", description = "the Dictionaries API")
public interface DictionariesApi {

    /**
     * GET /dictionaries/category-icons : Get category icons
     * Возвращает справочник доступных иконок для категорий. Содержит группированный список иконок с описаниями и цветами. 
     *
     * @return Category icons (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getCategoryIcons",
        summary = "Get category icons",
        description = "Возвращает справочник доступных иконок для категорий. Содержит группированный список иконок с описаниями и цветами. ",
        tags = { "Dictionaries" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category icons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryIconsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = CategoryIconsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dictionaries/category-icons",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<CategoryIconsResponse> getCategoryIcons(
        
    );


    /**
     * GET /dictionaries/currencies : Get currencies list
     * Возвращает справочник всех поддерживаемых валют в системе. Список содержит ISO-4217 коды валют с описаниями. 
     *
     * @return Currencies list (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getCurrencies",
        summary = "Get currencies list",
        description = "Возвращает справочник всех поддерживаемых валют в системе. Список содержит ISO-4217 коды валют с описаниями. ",
        tags = { "Dictionaries" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Currencies list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Currency.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = Currency.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dictionaries/currencies",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<List<Currency>> getCurrencies(
        
    );


    /**
     * GET /dictionaries/default-categories : Get default categories
     * Возвращает список категорий по умолчанию, которые доступны всем пользователям. Используется при первой настройке аккаунта. 
     *
     * @return Default categories (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getDefaultCategories",
        summary = "Get default categories",
        description = "Возвращает список категорий по умолчанию, которые доступны всем пользователям. Используется при первой настройке аккаунта. ",
        tags = { "Dictionaries" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Default categories", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DefaultCategoryDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = DefaultCategoryDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dictionaries/default-categories",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<List<DefaultCategoryDto>> getDefaultCategories(
        
    );


    /**
     * GET /dictionaries/user-categories : Get user categories
     * Возвращает персональный иерархический список категорий для текущего пользователя. Этот эндпоинт предназначен для чтения списка категорий (например, для селектов в UI). 
     *
     * @return User categories (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getUserCategories",
        summary = "Get user categories",
        description = "Возвращает персональный иерархический список категорий для текущего пользователя. Этот эндпоинт предназначен для чтения списка категорий (например, для селектов в UI). ",
        tags = { "Dictionaries" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User categories", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CategoryDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = CategoryDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dictionaries/user-categories",
        produces = { "application/json", "application/problem+json" }
    )
    
    ResponseEntity<List<CategoryDto>> getUserCategories(
        
    );

}
