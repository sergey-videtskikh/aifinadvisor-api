/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImportError } from './ImportError';
import {
    ImportErrorFromJSON,
    ImportErrorFromJSONTyped,
    ImportErrorToJSON,
} from './ImportError';
import type { ImportWarning } from './ImportWarning';
import {
    ImportWarningFromJSON,
    ImportWarningFromJSONTyped,
    ImportWarningToJSON,
} from './ImportWarning';

/**
 * 
 * @export
 * @interface ImportTransactionResponse
 */
export interface ImportTransactionResponse {
    /**
     * ID импорта
     * @type {string}
     * @memberof ImportTransactionResponse
     */
    importId?: string;
    /**
     * Количество успешно импортированных записей
     * @type {number}
     * @memberof ImportTransactionResponse
     */
    successCount?: number;
    /**
     * Количество записей с ошибками
     * @type {number}
     * @memberof ImportTransactionResponse
     */
    errorCount?: number;
    /**
     * Количество записей с предупреждениями
     * @type {number}
     * @memberof ImportTransactionResponse
     */
    warningCount?: number;
    /**
     * 
     * @type {Array<ImportError>}
     * @memberof ImportTransactionResponse
     */
    errors?: Array<ImportError>;
    /**
     * 
     * @type {Array<ImportWarning>}
     * @memberof ImportTransactionResponse
     */
    warnings?: Array<ImportWarning>;
    /**
     * Время обработки
     * @type {string}
     * @memberof ImportTransactionResponse
     */
    processingTime?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportTransactionResponse
     */
    status?: ImportTransactionResponseStatusEnum;
}


/**
 * @export
 */
export const ImportTransactionResponseStatusEnum = {
    Completed: 'COMPLETED',
    CompletedWithErrors: 'COMPLETED_WITH_ERRORS',
    Failed: 'FAILED'
} as const;
export type ImportTransactionResponseStatusEnum = typeof ImportTransactionResponseStatusEnum[keyof typeof ImportTransactionResponseStatusEnum];


/**
 * Check if a given object implements the ImportTransactionResponse interface.
 */
export function instanceOfImportTransactionResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImportTransactionResponseFromJSON(json: any): ImportTransactionResponse {
    return ImportTransactionResponseFromJSONTyped(json, false);
}

export function ImportTransactionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportTransactionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'importId': !exists(json, 'importId') ? undefined : json['importId'],
        'successCount': !exists(json, 'successCount') ? undefined : json['successCount'],
        'errorCount': !exists(json, 'errorCount') ? undefined : json['errorCount'],
        'warningCount': !exists(json, 'warningCount') ? undefined : json['warningCount'],
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ImportErrorFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(ImportWarningFromJSON)),
        'processingTime': !exists(json, 'processingTime') ? undefined : json['processingTime'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function ImportTransactionResponseToJSON(value?: ImportTransactionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'importId': value.importId,
        'successCount': value.successCount,
        'errorCount': value.errorCount,
        'warningCount': value.warningCount,
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ImportErrorToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(ImportWarningToJSON)),
        'processingTime': value.processingTime,
        'status': value.status,
    };
}

