/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
} from './TransactionType';

/**
 * 
 * @export
 * @interface UpdateTransactionRequest
 */
export interface UpdateTransactionRequest {
    /**
     * Сумма транзакции в формате decimal string (копейки)
     * @type {string}
     * @memberof UpdateTransactionRequest
     */
    amount?: string;
    /**
     * Код валюты ISO-4217
     * @type {string}
     * @memberof UpdateTransactionRequest
     */
    currency?: string;
    /**
     * Дата транзакции
     * @type {Date}
     * @memberof UpdateTransactionRequest
     */
    date?: Date;
    /**
     * ID категории
     * @type {string}
     * @memberof UpdateTransactionRequest
     */
    categoryId?: string;
    /**
     * Название транзакции
     * @type {string}
     * @memberof UpdateTransactionRequest
     */
    name?: string;
    /**
     * Подробное описание транзакции
     * @type {string}
     * @memberof UpdateTransactionRequest
     */
    description?: string;
    /**
     * 
     * @type {TransactionType}
     * @memberof UpdateTransactionRequest
     */
    type?: TransactionType;
    /**
     * ID счета
     * @type {string}
     * @memberof UpdateTransactionRequest
     */
    accountId?: string;
    /**
     * Исключить из расчетов
     * @type {boolean}
     * @memberof UpdateTransactionRequest
     */
    excluded?: boolean;
}

/**
 * Check if a given object implements the UpdateTransactionRequest interface.
 */
export function instanceOfUpdateTransactionRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateTransactionRequestFromJSON(json: any): UpdateTransactionRequest {
    return UpdateTransactionRequestFromJSONTyped(json, false);
}

export function UpdateTransactionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateTransactionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : TransactionTypeFromJSON(json['type']),
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'excluded': !exists(json, 'excluded') ? undefined : json['excluded'],
    };
}

export function UpdateTransactionRequestToJSON(value?: UpdateTransactionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'currency': value.currency,
        'date': value.date === undefined ? undefined : (value.date.toISOString().substring(0,10)),
        'categoryId': value.categoryId,
        'name': value.name,
        'description': value.description,
        'type': TransactionTypeToJSON(value.type),
        'accountId': value.accountId,
        'excluded': value.excluded,
    };
}

