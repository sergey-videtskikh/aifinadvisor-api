/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TelegramUserDto
 */
export interface TelegramUserDto {
    /**
     * Telegram User ID
     * @type {number}
     * @memberof TelegramUserDto
     */
    id: number;
    /**
     * Имя пользователя из Telegram
     * @type {string}
     * @memberof TelegramUserDto
     */
    firstName: string;
    /**
     * Фамилия пользователя из Telegram
     * @type {string}
     * @memberof TelegramUserDto
     */
    lastName?: string | null;
    /**
     * Username пользователя в Telegram
     * @type {string}
     * @memberof TelegramUserDto
     */
    username?: string | null;
    /**
     * URL фотографии профиля
     * @type {string}
     * @memberof TelegramUserDto
     */
    photoUrl?: string | null;
    /**
     * Unix timestamp авторизации
     * @type {number}
     * @memberof TelegramUserDto
     */
    authDate: number;
    /**
     * Хеш для проверки подлинности данных
     * @type {string}
     * @memberof TelegramUserDto
     */
    hash: string;
    /**
     * Сырая строка initData из Telegram Mini App (window.Telegram.WebApp.initData). Используется для валидации Mini App аутентификации. Если присутствует, используется вместо индивидуальных полей для проверки подлинности.
     * @type {string}
     * @memberof TelegramUserDto
     */
    initData?: string | null;
}

/**
 * Check if a given object implements the TelegramUserDto interface.
 */
export function instanceOfTelegramUserDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "authDate" in value;
    isInstance = isInstance && "hash" in value;

    return isInstance;
}

export function TelegramUserDtoFromJSON(json: any): TelegramUserDto {
    return TelegramUserDtoFromJSONTyped(json, false);
}

export function TelegramUserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TelegramUserDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'firstName': json['first_name'],
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'photoUrl': !exists(json, 'photo_url') ? undefined : json['photo_url'],
        'authDate': json['auth_date'],
        'hash': json['hash'],
        'initData': !exists(json, 'init_data') ? undefined : json['init_data'],
    };
}

export function TelegramUserDtoToJSON(value?: TelegramUserDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'username': value.username,
        'photo_url': value.photoUrl,
        'auth_date': value.authDate,
        'hash': value.hash,
        'init_data': value.initData,
    };
}

