/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProblemDetailsErrorsInner } from './ProblemDetailsErrorsInner';
import {
    ProblemDetailsErrorsInnerFromJSON,
    ProblemDetailsErrorsInnerFromJSONTyped,
    ProblemDetailsErrorsInnerToJSON,
} from './ProblemDetailsErrorsInner';

/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * URI идентифицирующий тип проблемы
     * @type {string}
     * @memberof ProblemDetails
     */
    type: string;
    /**
     * Краткое описание типа проблемы
     * @type {string}
     * @memberof ProblemDetails
     */
    title: string;
    /**
     * HTTP статус код
     * @type {number}
     * @memberof ProblemDetails
     */
    status: number;
    /**
     * Детальное описание проблемы
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string;
    /**
     * URI идентифицирующий конкретный случай проблемы
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string;
    /**
     * Детали ошибок валидации
     * @type {Array<ProblemDetailsErrorsInner>}
     * @memberof ProblemDetails
     */
    errors?: Array<ProblemDetailsErrorsInner>;
}

/**
 * Check if a given object implements the ProblemDetails interface.
 */
export function instanceOfProblemDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ProblemDetailsFromJSON(json: any): ProblemDetails {
    return ProblemDetailsFromJSONTyped(json, false);
}

export function ProblemDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProblemDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'status': json['status'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ProblemDetailsErrorsInnerFromJSON)),
    };
}

export function ProblemDetailsToJSON(value?: ProblemDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'title': value.title,
        'status': value.status,
        'detail': value.detail,
        'instance': value.instance,
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ProblemDetailsErrorsInnerToJSON)),
    };
}

