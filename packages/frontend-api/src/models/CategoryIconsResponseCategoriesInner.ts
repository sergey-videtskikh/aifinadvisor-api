/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryIconDto } from './CategoryIconDto';
import {
    CategoryIconDtoFromJSON,
    CategoryIconDtoFromJSONTyped,
    CategoryIconDtoToJSON,
} from './CategoryIconDto';

/**
 * 
 * @export
 * @interface CategoryIconsResponseCategoriesInner
 */
export interface CategoryIconsResponseCategoriesInner {
    /**
     * 
     * @type {string}
     * @memberof CategoryIconsResponseCategoriesInner
     */
    name?: string;
    /**
     * 
     * @type {Array<CategoryIconDto>}
     * @memberof CategoryIconsResponseCategoriesInner
     */
    icons?: Array<CategoryIconDto>;
}

/**
 * Check if a given object implements the CategoryIconsResponseCategoriesInner interface.
 */
export function instanceOfCategoryIconsResponseCategoriesInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CategoryIconsResponseCategoriesInnerFromJSON(json: any): CategoryIconsResponseCategoriesInner {
    return CategoryIconsResponseCategoriesInnerFromJSONTyped(json, false);
}

export function CategoryIconsResponseCategoriesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryIconsResponseCategoriesInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'icons': !exists(json, 'icons') ? undefined : ((json['icons'] as Array<any>).map(CategoryIconDtoFromJSON)),
    };
}

export function CategoryIconsResponseCategoriesInnerToJSON(value?: CategoryIconsResponseCategoriesInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'icons': value.icons === undefined ? undefined : ((value.icons as Array<any>).map(CategoryIconDtoToJSON)),
    };
}

