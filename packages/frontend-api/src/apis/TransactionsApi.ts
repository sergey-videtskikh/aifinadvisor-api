/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTransactionRequest,
  ErrorResponse,
  PagedTransactionsResponse,
  ProblemDetails,
  TransactionDto,
  TransactionType,
  UpdateTransactionRequest,
} from '../models/index';
import {
    CreateTransactionRequestFromJSON,
    CreateTransactionRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PagedTransactionsResponseFromJSON,
    PagedTransactionsResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TransactionDtoFromJSON,
    TransactionDtoToJSON,
    TransactionTypeFromJSON,
    TransactionTypeToJSON,
    UpdateTransactionRequestFromJSON,
    UpdateTransactionRequestToJSON,
} from '../models/index';

export interface CreateTransactionOperationRequest {
    createTransactionRequest: CreateTransactionRequest;
}

export interface GetTransactionsRequest {
    page?: number;
    size?: number;
    sort?: string;
    categoryId?: string;
    type?: TransactionType;
}

export interface UpdateTransactionOperationRequest {
    id: string;
    updateTransactionRequest: UpdateTransactionRequest;
}

/**
 * TransactionsApi - interface
 * 
 * @export
 * @interface TransactionsApiInterface
 */
export interface TransactionsApiInterface {
    /**
     * 
     * @summary Create new transaction
     * @param {CreateTransactionRequest} createTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    createTransactionRaw(requestParameters: CreateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDto>>;

    /**
     * Create new transaction
     */
    createTransaction(requestParameters: CreateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDto>;

    /**
     * Получить пагинированный список транзакций с возможностью сортировки
     * @summary Get transactions list
     * @param {number} [page] Номер страницы (начиная с 0)
     * @param {number} [size] Размер страницы
     * @param {string} [sort] Критерии сортировки в формате \&#39;field,direction\&#39;
     * @param {string} [categoryId] Фильтр по ID категории
     * @param {TransactionType} [type] Фильтр по типу транзакции
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedTransactionsResponse>>;

    /**
     * Получить пагинированный список транзакций с возможностью сортировки
     * Get transactions list
     */
    getTransactions(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedTransactionsResponse>;

    /**
     * 
     * @summary Update transaction
     * @param {string} id 
     * @param {UpdateTransactionRequest} updateTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    updateTransactionRaw(requestParameters: UpdateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDto>>;

    /**
     * Update transaction
     */
    updateTransaction(requestParameters: UpdateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDto>;

}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI implements TransactionsApiInterface {

    /**
     * Create new transaction
     */
    async createTransactionRaw(requestParameters: CreateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDto>> {
        if (requestParameters.createTransactionRequest === null || requestParameters.createTransactionRequest === undefined) {
            throw new runtime.RequiredError('createTransactionRequest','Required parameter requestParameters.createTransactionRequest was null or undefined when calling createTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionRequestToJSON(requestParameters.createTransactionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDtoFromJSON(jsonValue));
    }

    /**
     * Create new transaction
     */
    async createTransaction(requestParameters: CreateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDto> {
        const response = await this.createTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить пагинированный список транзакций с возможностью сортировки
     * Get transactions list
     */
    async getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedTransactionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * Получить пагинированный список транзакций с возможностью сортировки
     * Get transactions list
     */
    async getTransactions(requestParameters: GetTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedTransactionsResponse> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update transaction
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTransaction.');
        }

        if (requestParameters.updateTransactionRequest === null || requestParameters.updateTransactionRequest === undefined) {
            throw new runtime.RequiredError('updateTransactionRequest','Required parameter requestParameters.updateTransactionRequest was null or undefined when calling updateTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTransactionRequestToJSON(requestParameters.updateTransactionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDtoFromJSON(jsonValue));
    }

    /**
     * Update transaction
     */
    async updateTransaction(requestParameters: UpdateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDto> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
