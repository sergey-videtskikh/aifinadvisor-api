/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImportBatchSummary,
  ImportHistoryResponse,
  ImportTransactionResponse,
  ProblemDetails,
} from '../models/index';
import {
    ImportBatchSummaryFromJSON,
    ImportBatchSummaryToJSON,
    ImportHistoryResponseFromJSON,
    ImportHistoryResponseToJSON,
    ImportTransactionResponseFromJSON,
    ImportTransactionResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface GetImportHistoryRequest {
    page?: number;
    size?: number;
}

export interface GetImportResultRequest {
    importId: string;
}

export interface ImportTransactionsRequest {
    file: Blob;
    skipFirstRow?: boolean;
}

/**
 * ImportExportApi - interface
 * 
 * @export
 * @interface ImportExportApiInterface
 */
export interface ImportExportApiInterface {
    /**
     * Скачивает предварительно настроенный Excel файл шаблона для заполнения транзакций.  **Структура шаблона:** - Дата (формат: YYYY-MM-DD) - Сумма (числовое значение) - Тип (INCOME/EXPENSE) - Категория (название категории) - Описание (текстовое описание транзакции) - Счет (ID или название счета) 
     * @summary Download Excel template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportExportApiInterface
     */
    downloadTransactionTemplateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Скачивает предварительно настроенный Excel файл шаблона для заполнения транзакций.  **Структура шаблона:** - Дата (формат: YYYY-MM-DD) - Сумма (числовое значение) - Тип (INCOME/EXPENSE) - Категория (название категории) - Описание (текстовое описание транзакции) - Счет (ID или название счета) 
     * Download Excel template
     */
    downloadTransactionTemplate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Возвращает историю импорта транзакций пользователя. 
     * @summary Get import history
     * @param {number} [page] Page number (0-based)
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportExportApiInterface
     */
    getImportHistoryRaw(requestParameters: GetImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportHistoryResponse>>;

    /**
     * Возвращает историю импорта транзакций пользователя. 
     * Get import history
     */
    getImportHistory(requestParameters: GetImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportHistoryResponse>;

    /**
     * Получает детальную информацию о результате конкретного импорта. 
     * @summary Get import result
     * @param {string} importId Import ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportExportApiInterface
     */
    getImportResultRaw(requestParameters: GetImportResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportBatchSummary>>;

    /**
     * Получает детальную информацию о результате конкретного импорта. 
     * Get import result
     */
    getImportResult(requestParameters: GetImportResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportBatchSummary>;

    /**
     * Импортирует транзакции из загруженного Excel файла. Возвращает результат импорта с количеством успешных записей и ошибок. 
     * @summary Import transactions from Excel
     * @param {Blob} file Excel файл с транзакциями
     * @param {boolean} [skipFirstRow] Пропустить первую строку (заголовки)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportExportApiInterface
     */
    importTransactionsRaw(requestParameters: ImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportTransactionResponse>>;

    /**
     * Импортирует транзакции из загруженного Excel файла. Возвращает результат импорта с количеством успешных записей и ошибок. 
     * Import transactions from Excel
     */
    importTransactions(requestParameters: ImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportTransactionResponse>;

}

/**
 * 
 */
export class ImportExportApi extends runtime.BaseAPI implements ImportExportApiInterface {

    /**
     * Скачивает предварительно настроенный Excel файл шаблона для заполнения транзакций.  **Структура шаблона:** - Дата (формат: YYYY-MM-DD) - Сумма (числовое значение) - Тип (INCOME/EXPENSE) - Категория (название категории) - Описание (текстовое описание транзакции) - Счет (ID или название счета) 
     * Download Excel template
     */
    async downloadTransactionTemplateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Скачивает предварительно настроенный Excel файл шаблона для заполнения транзакций.  **Структура шаблона:** - Дата (формат: YYYY-MM-DD) - Сумма (числовое значение) - Тип (INCOME/EXPENSE) - Категория (название категории) - Описание (текстовое описание транзакции) - Счет (ID или название счета) 
     * Download Excel template
     */
    async downloadTransactionTemplate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadTransactionTemplateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает историю импорта транзакций пользователя. 
     * Get import history
     */
    async getImportHistoryRaw(requestParameters: GetImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportHistoryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/import/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает историю импорта транзакций пользователя. 
     * Get import history
     */
    async getImportHistory(requestParameters: GetImportHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportHistoryResponse> {
        const response = await this.getImportHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает детальную информацию о результате конкретного импорта. 
     * Get import result
     */
    async getImportResultRaw(requestParameters: GetImportResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportBatchSummary>> {
        if (requestParameters.importId === null || requestParameters.importId === undefined) {
            throw new runtime.RequiredError('importId','Required parameter requestParameters.importId was null or undefined when calling getImportResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions/import/{importId}`.replace(`{${"importId"}}`, encodeURIComponent(String(requestParameters.importId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportBatchSummaryFromJSON(jsonValue));
    }

    /**
     * Получает детальную информацию о результате конкретного импорта. 
     * Get import result
     */
    async getImportResult(requestParameters: GetImportResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportBatchSummary> {
        const response = await this.getImportResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Импортирует транзакции из загруженного Excel файла. Возвращает результат импорта с количеством успешных записей и ошибок. 
     * Import transactions from Excel
     */
    async importTransactionsRaw(requestParameters: ImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportTransactionResponse>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling importTransactions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.skipFirstRow !== undefined) {
            formParams.append('skipFirstRow', requestParameters.skipFirstRow as any);
        }

        const response = await this.request({
            path: `/transactions/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Импортирует транзакции из загруженного Excel файла. Возвращает результат импорта с количеством успешных записей и ошибок. 
     * Import transactions from Excel
     */
    async importTransactions(requestParameters: ImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportTransactionResponse> {
        const response = await this.importTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
