/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedReceiptResponse,
  ProblemDetails,
  ReceiptResponse,
  UpdateReceiptRequest,
  UploadReceiptResponse,
} from '../models/index';
import {
    PagedReceiptResponseFromJSON,
    PagedReceiptResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ReceiptResponseFromJSON,
    ReceiptResponseToJSON,
    UpdateReceiptRequestFromJSON,
    UpdateReceiptRequestToJSON,
    UploadReceiptResponseFromJSON,
    UploadReceiptResponseToJSON,
} from '../models/index';

export interface DeleteReceiptRequest {
    id: string;
}

export interface DownloadReceiptRequest {
    id: string;
}

export interface GetReceiptByIdRequest {
    id: string;
}

export interface GetReceiptsRequest {
    page?: number;
    size?: number;
    transactionId?: string;
}

export interface UpdateReceiptOperationRequest {
    id: string;
    updateReceiptRequest: UpdateReceiptRequest;
}

export interface UploadReceiptRequest {
    file: Blob;
    transactionId?: string;
    description?: string;
}

/**
 * ReceiptsApi - interface
 * 
 * @export
 * @interface ReceiptsApiInterface
 */
export interface ReceiptsApiInterface {
    /**
     * Удаляет чек и связанный с ним файл. 
     * @summary Delete receipt
     * @param {string} id Receipt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    deleteReceiptRaw(requestParameters: DeleteReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Удаляет чек и связанный с ним файл. 
     * Delete receipt
     */
    deleteReceipt(requestParameters: DeleteReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Скачивает файл чека. 
     * @summary Download receipt file
     * @param {string} id Receipt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    downloadReceiptRaw(requestParameters: DownloadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Скачивает файл чека. 
     * Download receipt file
     */
    downloadReceipt(requestParameters: DownloadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Получает информацию о чеке по его идентификатору. 
     * @summary Get receipt by ID
     * @param {string} id Receipt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    getReceiptByIdRaw(requestParameters: GetReceiptByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReceiptResponse>>;

    /**
     * Получает информацию о чеке по его идентификатору. 
     * Get receipt by ID
     */
    getReceiptById(requestParameters: GetReceiptByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReceiptResponse>;

    /**
     * Получает пагинированный список чеков пользователя. 
     * @summary Get receipts list
     * @param {number} [page] Page number (0-based)
     * @param {number} [size] Page size
     * @param {string} [transactionId] Filter by transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    getReceiptsRaw(requestParameters: GetReceiptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReceiptResponse>>;

    /**
     * Получает пагинированный список чеков пользователя. 
     * Get receipts list
     */
    getReceipts(requestParameters: GetReceiptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReceiptResponse>;

    /**
     * Обновляет информацию о чеке. 
     * @summary Update receipt
     * @param {string} id Receipt ID
     * @param {UpdateReceiptRequest} updateReceiptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    updateReceiptRaw(requestParameters: UpdateReceiptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReceiptResponse>>;

    /**
     * Обновляет информацию о чеке. 
     * Update receipt
     */
    updateReceipt(requestParameters: UpdateReceiptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReceiptResponse>;

    /**
     * Загружает файл чека (изображение или PDF) с возможностью привязки к транзакции. 
     * @summary Upload receipt
     * @param {Blob} file Файл чека (изображение или PDF)
     * @param {string} [transactionId] ID транзакции для привязки
     * @param {string} [description] Описание чека
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    uploadReceiptRaw(requestParameters: UploadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadReceiptResponse>>;

    /**
     * Загружает файл чека (изображение или PDF) с возможностью привязки к транзакции. 
     * Upload receipt
     */
    uploadReceipt(requestParameters: UploadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadReceiptResponse>;

}

/**
 * 
 */
export class ReceiptsApi extends runtime.BaseAPI implements ReceiptsApiInterface {

    /**
     * Удаляет чек и связанный с ним файл. 
     * Delete receipt
     */
    async deleteReceiptRaw(requestParameters: DeleteReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteReceipt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/receipts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удаляет чек и связанный с ним файл. 
     * Delete receipt
     */
    async deleteReceipt(requestParameters: DeleteReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReceiptRaw(requestParameters, initOverrides);
    }

    /**
     * Скачивает файл чека. 
     * Download receipt file
     */
    async downloadReceiptRaw(requestParameters: DownloadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadReceipt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/receipts/{id}/download`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Скачивает файл чека. 
     * Download receipt file
     */
    async downloadReceipt(requestParameters: DownloadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadReceiptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает информацию о чеке по его идентификатору. 
     * Get receipt by ID
     */
    async getReceiptByIdRaw(requestParameters: GetReceiptByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReceiptResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReceiptById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/receipts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReceiptResponseFromJSON(jsonValue));
    }

    /**
     * Получает информацию о чеке по его идентификатору. 
     * Get receipt by ID
     */
    async getReceiptById(requestParameters: GetReceiptByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReceiptResponse> {
        const response = await this.getReceiptByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает пагинированный список чеков пользователя. 
     * Get receipts list
     */
    async getReceiptsRaw(requestParameters: GetReceiptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedReceiptResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.transactionId !== undefined) {
            queryParameters['transactionId'] = requestParameters.transactionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/receipts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedReceiptResponseFromJSON(jsonValue));
    }

    /**
     * Получает пагинированный список чеков пользователя. 
     * Get receipts list
     */
    async getReceipts(requestParameters: GetReceiptsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedReceiptResponse> {
        const response = await this.getReceiptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет информацию о чеке. 
     * Update receipt
     */
    async updateReceiptRaw(requestParameters: UpdateReceiptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReceiptResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReceipt.');
        }

        if (requestParameters.updateReceiptRequest === null || requestParameters.updateReceiptRequest === undefined) {
            throw new runtime.RequiredError('updateReceiptRequest','Required parameter requestParameters.updateReceiptRequest was null or undefined when calling updateReceipt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/receipts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReceiptRequestToJSON(requestParameters.updateReceiptRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReceiptResponseFromJSON(jsonValue));
    }

    /**
     * Обновляет информацию о чеке. 
     * Update receipt
     */
    async updateReceipt(requestParameters: UpdateReceiptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReceiptResponse> {
        const response = await this.updateReceiptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Загружает файл чека (изображение или PDF) с возможностью привязки к транзакции. 
     * Upload receipt
     */
    async uploadReceiptRaw(requestParameters: UploadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadReceiptResponse>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadReceipt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.transactionId !== undefined) {
            formParams.append('transactionId', requestParameters.transactionId as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        const response = await this.request({
            path: `/receipts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadReceiptResponseFromJSON(jsonValue));
    }

    /**
     * Загружает файл чека (изображение или PDF) с возможностью привязки к транзакции. 
     * Upload receipt
     */
    async uploadReceipt(requestParameters: UploadReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadReceiptResponse> {
        const response = await this.uploadReceiptRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
