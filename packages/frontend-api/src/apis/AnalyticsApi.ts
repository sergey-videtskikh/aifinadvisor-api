/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsResponse,
  CategoryAnalyticsResponse,
  DailyTransactionsResponse,
  PeriodSummaryResponse,
  ProblemDetails,
  TransactionType,
} from '../models/index';
import {
    AnalyticsResponseFromJSON,
    AnalyticsResponseToJSON,
    CategoryAnalyticsResponseFromJSON,
    CategoryAnalyticsResponseToJSON,
    DailyTransactionsResponseFromJSON,
    DailyTransactionsResponseToJSON,
    PeriodSummaryResponseFromJSON,
    PeriodSummaryResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TransactionTypeFromJSON,
    TransactionTypeToJSON,
} from '../models/index';

export interface GetAnalyticsRequest {
    startDate?: Date;
    endDate?: Date;
}

export interface GetCategoriesAnalyticsRequest {
    startDate?: Date;
    endDate?: Date;
    type?: TransactionType;
}

export interface GetDailyTransactionsRequest {
    startDate?: Date;
    endDate?: Date;
}

export interface GetPeriodSummaryRequest {
    startDate?: Date;
    endDate?: Date;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * Возвращает аналитическую информацию о доходах, расходах, балансе и последних транзакциях за указанный период. По умолчанию, период составляет последний год. 
     * @summary Get analytics data
     * @param {Date} [startDate] Начальная дата периода в формате YYYY-MM-DD
     * @param {Date} [endDate] Конечная дата периода в формате YYYY-MM-DD
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getAnalyticsRaw(requestParameters: GetAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsResponse>>;

    /**
     * Возвращает аналитическую информацию о доходах, расходах, балансе и последних транзакциях за указанный период. По умолчанию, период составляет последний год. 
     * Get analytics data
     */
    getAnalytics(requestParameters: GetAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsResponse>;

    /**
     * Возвращает аналитику по категориям - доходы и расходы сгруппированные по категориям за период. 
     * @summary Get categories analytics
     * @param {Date} [startDate] Начальная дата периода в формате YYYY-MM-DD
     * @param {Date} [endDate] Конечная дата периода в формате YYYY-MM-DD
     * @param {TransactionType} [type] Тип транзакций для анализа
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getCategoriesAnalyticsRaw(requestParameters: GetCategoriesAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAnalyticsResponse>>;

    /**
     * Возвращает аналитику по категориям - доходы и расходы сгруппированные по категориям за период. 
     * Get categories analytics
     */
    getCategoriesAnalytics(requestParameters: GetCategoriesAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAnalyticsResponse>;

    /**
     * Возвращает ежедневную статистику транзакций за период с группировкой по дням. 
     * @summary Get daily transactions
     * @param {Date} [startDate] Начальная дата периода в формате YYYY-MM-DD
     * @param {Date} [endDate] Конечная дата периода в формате YYYY-MM-DD
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getDailyTransactionsRaw(requestParameters: GetDailyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyTransactionsResponse>>;

    /**
     * Возвращает ежедневную статистику транзакций за период с группировкой по дням. 
     * Get daily transactions
     */
    getDailyTransactions(requestParameters: GetDailyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyTransactionsResponse>;

    /**
     * Возвращает сводную аналитику за указанный период с группировкой по месяцам. 
     * @summary Get period summary
     * @param {Date} [startDate] Начальная дата периода в формате YYYY-MM-DD
     * @param {Date} [endDate] Конечная дата периода в формате YYYY-MM-DD
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getPeriodSummaryRaw(requestParameters: GetPeriodSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodSummaryResponse>>;

    /**
     * Возвращает сводную аналитику за указанный период с группировкой по месяцам. 
     * Get period summary
     */
    getPeriodSummary(requestParameters: GetPeriodSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodSummaryResponse>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * Возвращает аналитическую информацию о доходах, расходах, балансе и последних транзакциях за указанный период. По умолчанию, период составляет последний год. 
     * Get analytics data
     */
    async getAnalyticsRaw(requestParameters: GetAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/analytics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает аналитическую информацию о доходах, расходах, балансе и последних транзакциях за указанный период. По умолчанию, период составляет последний год. 
     * Get analytics data
     */
    async getAnalytics(requestParameters: GetAnalyticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsResponse> {
        const response = await this.getAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает аналитику по категориям - доходы и расходы сгруппированные по категориям за период. 
     * Get categories analytics
     */
    async getCategoriesAnalyticsRaw(requestParameters: GetCategoriesAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAnalyticsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/analytics/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryAnalyticsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает аналитику по категориям - доходы и расходы сгруппированные по категориям за период. 
     * Get categories analytics
     */
    async getCategoriesAnalytics(requestParameters: GetCategoriesAnalyticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAnalyticsResponse> {
        const response = await this.getCategoriesAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает ежедневную статистику транзакций за период с группировкой по дням. 
     * Get daily transactions
     */
    async getDailyTransactionsRaw(requestParameters: GetDailyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyTransactionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/analytics/daily`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DailyTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает ежедневную статистику транзакций за период с группировкой по дням. 
     * Get daily transactions
     */
    async getDailyTransactions(requestParameters: GetDailyTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyTransactionsResponse> {
        const response = await this.getDailyTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает сводную аналитику за указанный период с группировкой по месяцам. 
     * Get period summary
     */
    async getPeriodSummaryRaw(requestParameters: GetPeriodSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodSummaryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/analytics/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает сводную аналитику за указанный период с группировкой по месяцам. 
     * Get period summary
     */
    async getPeriodSummary(requestParameters: GetPeriodSummaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodSummaryResponse> {
        const response = await this.getPeriodSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
