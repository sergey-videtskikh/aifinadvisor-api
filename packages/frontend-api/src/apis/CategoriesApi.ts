/* tslint:disable */
/* eslint-disable */
/**
 * FinApp API
 * API for financial application
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support@finapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryDto,
  CreateCategoryRequest,
  ProblemDetails,
  UpdateCategoryRequest,
} from '../models/index';
import {
    CategoryDtoFromJSON,
    CategoryDtoToJSON,
    CreateCategoryRequestFromJSON,
    CreateCategoryRequestToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateCategoryRequestFromJSON,
    UpdateCategoryRequestToJSON,
} from '../models/index';

export interface CreateCategoryOperationRequest {
    createCategoryRequest: CreateCategoryRequest;
}

export interface DeleteCategoryRequest {
    id: string;
}

export interface GetCategoryByIdRequest {
    id: string;
}

export interface UpdateCategoryOperationRequest {
    id: string;
    updateCategoryRequest: UpdateCategoryRequest;
}

/**
 * CategoriesApi - interface
 * 
 * @export
 * @interface CategoriesApiInterface
 */
export interface CategoriesApiInterface {
    /**
     * Создает новую категорию для классификации транзакций. Поддерживает создание подкатегорий и настройку иконок. 
     * @summary Create new category
     * @param {CreateCategoryRequest} createCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    createCategoryRaw(requestParameters: CreateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>>;

    /**
     * Создает новую категорию для классификации транзакций. Поддерживает создание подкатегорий и настройку иконок. 
     * Create new category
     */
    createCategory(requestParameters: CreateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto>;

    /**
     * Удаляет категорию. Если в категории есть транзакции, они будут перенесены в категорию \"Без категории\". 
     * @summary Delete category
     * @param {string} id Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    deleteCategoryRaw(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Удаляет категорию. Если в категории есть транзакции, они будут перенесены в категорию \"Без категории\". 
     * Delete category
     */
    deleteCategory(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Получает список всех категорий пользователя. Возвращает иерархическую структуру с подкатегориями. 
     * @summary Get categories list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryDto>>>;

    /**
     * Получает список всех категорий пользователя. Возвращает иерархическую структуру с подкатегориями. 
     * Get categories list
     */
    getCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryDto>>;

    /**
     * Получает детальную информацию о категории по её идентификатору. 
     * @summary Get category by ID
     * @param {string} id Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>>;

    /**
     * Получает детальную информацию о категории по её идентификатору. 
     * Get category by ID
     */
    getCategoryById(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto>;

    /**
     * Полностью обновляет данные категории. 
     * @summary Update category
     * @param {string} id Category ID
     * @param {UpdateCategoryRequest} updateCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    updateCategoryRaw(requestParameters: UpdateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>>;

    /**
     * Полностью обновляет данные категории. 
     * Update category
     */
    updateCategory(requestParameters: UpdateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto>;

}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI implements CategoriesApiInterface {

    /**
     * Создает новую категорию для классификации транзакций. Поддерживает создание подкатегорий и настройку иконок. 
     * Create new category
     */
    async createCategoryRaw(requestParameters: CreateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>> {
        if (requestParameters.createCategoryRequest === null || requestParameters.createCategoryRequest === undefined) {
            throw new runtime.RequiredError('createCategoryRequest','Required parameter requestParameters.createCategoryRequest was null or undefined when calling createCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCategoryRequestToJSON(requestParameters.createCategoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDtoFromJSON(jsonValue));
    }

    /**
     * Создает новую категорию для классификации транзакций. Поддерживает создание подкатегорий и настройку иконок. 
     * Create new category
     */
    async createCategory(requestParameters: CreateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto> {
        const response = await this.createCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет категорию. Если в категории есть транзакции, они будут перенесены в категорию \"Без категории\". 
     * Delete category
     */
    async deleteCategoryRaw(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удаляет категорию. Если в категории есть транзакции, они будут перенесены в категорию \"Без категории\". 
     * Delete category
     */
    async deleteCategory(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Получает список всех категорий пользователя. Возвращает иерархическую структуру с подкатегориями. 
     * Get categories list
     */
    async getCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryDtoFromJSON));
    }

    /**
     * Получает список всех категорий пользователя. Возвращает иерархическую структуру с подкатегориями. 
     * Get categories list
     */
    async getCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryDto>> {
        const response = await this.getCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Получает детальную информацию о категории по её идентификатору. 
     * Get category by ID
     */
    async getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCategoryById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDtoFromJSON(jsonValue));
    }

    /**
     * Получает детальную информацию о категории по её идентификатору. 
     * Get category by ID
     */
    async getCategoryById(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto> {
        const response = await this.getCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Полностью обновляет данные категории. 
     * Update category
     */
    async updateCategoryRaw(requestParameters: UpdateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCategory.');
        }

        if (requestParameters.updateCategoryRequest === null || requestParameters.updateCategoryRequest === undefined) {
            throw new runtime.RequiredError('updateCategoryRequest','Required parameter requestParameters.updateCategoryRequest was null or undefined when calling updateCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCategoryRequestToJSON(requestParameters.updateCategoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDtoFromJSON(jsonValue));
    }

    /**
     * Полностью обновляет данные категории. 
     * Update category
     */
    async updateCategory(requestParameters: UpdateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto> {
        const response = await this.updateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
