openapi: 3.0.3
info:
  title: FinApp API
  description: API for financial application
  version: 1.0.0
  contact:
    name: API Support
    email: support@finapp.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.finapp.com/api/v1
    description: Production server

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags: [Authentication]
      summary: User registration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/telegram:
    post:
      tags: [Authentication]
      summary: Telegram authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramUserDto'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Telegram authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    LoginRequest:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
          format: email
          description: "Login (email) для входа"
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: "Пароль"
          example: "SecurePassword123"

    RegisterRequest:
      type: object
      required: [login, password, firstName, lastName]
      properties:
        login:
          type: string
          format: email
          description: "Login (email) для входа"
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: "Пароль"
          example: "SecurePassword123"
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Имя"
          example: "Иван"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Фамилия"
          example: "Иванов"
        phone:
          type: string
          nullable: true
          description: "Номер телефона"
          example: "+79261234567"
        telegramNickname:
          type: string
          nullable: true
          description: "Telegram никнейм"
          example: "ivan_ivanov"

    JwtResponse:
      type: object
      properties:
        token:
          type: string
          description: "JWT токен"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TelegramUserDto:
      type: object
      required: [id, first_name, auth_date, hash]
      properties:
        id:
          type: integer
          format: int64
          description: "Telegram User ID"
        first_name:
          type: string
          description: "Имя пользователя из Telegram"
        last_name:
          type: string
          nullable: true
          description: "Фамилия пользователя из Telegram"
        username:
          type: string
          nullable: true
          description: "Username пользователя в Telegram"
        photo_url:
          type: string
          format: uri
          nullable: true
          description: "URL фотографии профиля"
        auth_date:
          type: integer
          format: int64
          description: "Unix timestamp авторизации"
        hash:
          type: string
          description: "Хеш для проверки подлинности данных"

    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
          format: password
          description: "Текущий пароль пользователя для подтверждения"
          example: "currentSecretPassword123"
        newPassword:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          description: "Новый пароль"
          example: "NewSecurePassword123!"
        confirmPassword:
          type: string
          format: password
          description: "Подтверждение нового пароля"
          example: "NewSecurePassword123!"

    ChangePasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "Флаг успешного изменения пароля"
          example: true
        message:
          type: string
          description: "Сообщение об успешном изменении пароля"
          example: "Пароль успешно изменен"
        changedAt:
          type: string
          format: date-time
          description: "Дата и время изменения пароля"
          example: "2024-03-15T14:30:00Z"
        newToken:
          type: string
          nullable: true
          description: "Новый JWT токен, если требуется обновление сессии"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        code:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []