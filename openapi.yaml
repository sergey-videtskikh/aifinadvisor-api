openapi: 3.0.3
info:
  title: FinApp API
  description: API for financial application
  version: 1.1.0
  contact:
    name: API Support
    email: support@finapp.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.finapp.com/api/v1
    description: Production server

paths:
  # Auth endpoints
  /auth/login:
    post:
      operationId: authenticateUser
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      operationId: registerUser
      tags: [Authentication]
      summary: User registration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/telegram:
    post:
      operationId: authenticateWithTelegram
      tags: [Authentication]
      summary: Telegram authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramUserDto'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Telegram authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      operationId: changeUserPassword
      tags: [Authentication]
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Transaction endpoints
  /transactions:
    get:
      operationId: getTransactions
      tags: [Transactions]
      summary: Get transactions list
      description: "Получить пагинированный список транзакций с возможностью сортировки"
      parameters:
        - name: page
          in: query
          description: "Номер страницы (начиная с 0)"
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: "Размер страницы"
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: "Критерии сортировки в формате 'field,direction'"
          schema:
            type: string
            default: "date,desc"
            example: "date,desc"
        - name: categoryId
          in: query
          description: "Фильтр по ID категории"
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          description: "Фильтр по типу транзакции"
          schema:
            $ref: '#/components/schemas/TransactionType'
      responses:
        '200':
          description: Transactions list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedTransactionsResponse'
        '400':
          description: Invalid pagination parameters
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      operationId: createTransaction
      tags: [Transactions]
      summary: Create new transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: Transaction created
          headers:
            Location:
              schema:
                type: string
              description: "URL созданной транзакции"
              example: "/api/v1/transactions/123e4567-e89b-12d3-a456-426614174000"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{id}:
    put:
      operationId: updateTransaction
      tags: [Transactions]
      summary: Update transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransactionRequest'
      responses:
        '200':
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDto'
        '400':
          description: Invalid request data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Transaction not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  # Category endpoints
  /categories:
    get:
      operationId: getCategories
      tags: [Categories]
      summary: Get categories list
      responses:
        '200':
          description: Categories list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
    post:
      operationId: createCategory
      tags: [Categories]
      summary: Create new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created
          headers:
            Location:
              schema:
                type: string
              description: "URL созданной категории"
              example: "/api/v1/categories/456e7890-e89b-12d3-a456-426614174001"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Invalid request data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Category name already exists
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  schemas:
    # Auth DTOs
    LoginRequest:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
          format: email
          description: "Login (email) для входа"
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: "Пароль"
          example: "SecurePassword123"

    RegisterRequest:
      type: object
      required: [login, password, firstName, lastName]
      properties:
        login:
          type: string
          format: email
          description: "Login (email) для входа"
          example: "ivan.ivanov@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: "Пароль"
          example: "SecurePassword123"
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Имя"
          example: "Иван"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Фамилия"
          example: "Иванов"
        phone:
          type: string
          nullable: true
          description: "Номер телефона"
          example: "+79261234567"
        telegramNickname:
          type: string
          nullable: true
          description: "Telegram никнейм"
          example: "ivan_ivanov"

    JwtResponse:
      type: object
      properties:
        token:
          type: string
          description: "JWT токен"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TelegramUserDto:
      type: object
      required: [id, first_name, auth_date, hash]
      properties:
        id:
          type: integer
          format: int64
          description: "Telegram User ID"
        first_name:
          type: string
          description: "Имя пользователя из Telegram"
        last_name:
          type: string
          nullable: true
          description: "Фамилия пользователя из Telegram"
        username:
          type: string
          nullable: true
          description: "Username пользователя в Telegram"
        photo_url:
          type: string
          format: uri
          nullable: true
          description: "URL фотографии профиля"
        auth_date:
          type: integer
          format: int64
          description: "Unix timestamp авторизации"
        hash:
          type: string
          description: "Хеш для проверки подлинности данных"

    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
          format: password
          description: "Текущий пароль пользователя для подтверждения"
          example: "currentSecretPassword123"
        newPassword:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          description: "Новый пароль"
          example: "NewSecurePassword123!"
        confirmPassword:
          type: string
          format: password
          description: "Подтверждение нового пароля"
          example: "NewSecurePassword123!"

    ChangePasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "Флаг успешного изменения пароля"
          example: true
        message:
          type: string
          description: "Сообщение об успешном изменении пароля"
          example: "Пароль успешно изменен"
        changedAt:
          type: string
          format: date-time
          description: "Дата и время изменения пароля"
          example: "2024-03-15T14:30:00Z"
        newToken:
          type: string
          nullable: true
          description: "Новый JWT токен, если требуется обновление сессии"

    # Transaction DTOs
    TransactionDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "ID транзакции"
        amount:
          type: string
          pattern: '^\d+\.\d{2}$'
          description: "Сумма транзакции в формате decimal string (копейки)"
          example: "250.50"
        date:
          type: string
          format: date
          description: "Дата транзакции"
          example: "2025-09-15"
        categoryId:
          type: string
          format: uuid
          description: "ID категории"
        name:
          type: string
          description: "Название транзакции"
          example: "Обед в кафе"
        type:
          $ref: '#/components/schemas/TransactionType'
        inputType:
          $ref: '#/components/schemas/InputType'
        accountId:
          type: string
          format: uuid
          description: "ID счета"
        excluded:
          type: boolean
          description: "Исключить из расчетов"
          default: false

    CreateTransactionRequest:
      type: object
      required: [amount, categoryId, name, type, accountId]
      properties:
        amount:
          type: string
          pattern: '^\d+\.\d{2}$'
          description: "Сумма транзакции в формате decimal string (копейки)"
          example: "250.50"
        date:
          type: string
          format: date
          description: "Дата транзакции"
          example: "2025-09-15"
        categoryId:
          type: string
          format: uuid
          description: "ID категории"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Название транзакции"
          example: "Обед в кафе"
        type:
          $ref: '#/components/schemas/TransactionType'
        inputType:
          $ref: '#/components/schemas/InputType'
          default: MANUAL
        accountId:
          type: string
          format: uuid
          description: "ID счета"
        excluded:
          type: boolean
          description: "Исключить из расчетов"
          default: false

    UpdateTransactionRequest:
      type: object
      properties:
        amount:
          type: string
          pattern: '^\d+\.\d{2}$'
          description: "Сумма транзакции в формате decimal string (копейки)"
          example: "260.00"
        date:
          type: string
          format: date
          description: "Дата транзакции"
          example: "2025-09-16"
        categoryId:
          type: string
          format: uuid
          description: "ID категории"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: "Название транзакции"
        type:
          $ref: '#/components/schemas/TransactionType'
        accountId:
          type: string
          format: uuid
          description: "ID счета"
        excluded:
          type: boolean
          description: "Исключить из расчетов"

    TransactionType:
      type: string
      enum: [INCOME, EXPENSE, TRANSFER]
      description: "Тип транзакции"

    InputType:
      type: string
      enum: [MANUAL, IMPORT, RECEIPT_SCAN]
      description: "Тип ввода транзакции"

    PagedTransactionsResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDto'
          description: "Массив транзакций на текущей странице"
        totalElements:
          type: integer
          format: int64
          description: "Общее количество транзакций"
          example: 150
        totalPages:
          type: integer
          description: "Общее количество страниц"
          example: 8
        size:
          type: integer
          description: "Размер страницы"
          example: 20
        number:
          type: integer
          description: "Номер текущей страницы (начиная с 0)"
          example: 0
        numberOfElements:
          type: integer
          description: "Количество элементов на текущей странице"
          example: 20
        first:
          type: boolean
          description: "Первая ли это страница"
          example: true
        last:
          type: boolean
          description: "Последняя ли это страница"
          example: false
        empty:
          type: boolean
          description: "Пустая ли текущая страница"
          example: false
        sort:
          type: object
          properties:
            empty:
              type: boolean
              description: "Отсутствует ли сортировка"
            sorted:
              type: boolean
              description: "Применена ли сортировка"
            unsorted:
              type: boolean
              description: "Не применена ли сортировка"

    # Category DTOs
    CategoryDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "ID категории"
        name:
          type: string
          description: "Название категории"
        type:
          $ref: '#/components/schemas/CategoryType'
        parentId:
          type: string
          format: uuid
          nullable: true
          description: "ID родительской категории"
        icon:
          type: string
          nullable: true
          description: "Иконка категории"
          example: "solar:wallet-money-line-duotone"
        iconColor:
          type: string
          nullable: true
          description: "Цвет иконки в HEX-формате"
          example: "#10B981"
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDto'
          description: "Список вложенных подкатегорий"

    CreateCategoryRequest:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: "Название категории"
        type:
          $ref: '#/components/schemas/CategoryType'
        parentId:
          type: string
          format: uuid
          nullable: true
          description: "ID родительской категории"
        icon:
          type: string
          nullable: true
          description: "Иконка категории"
        iconColor:
          type: string
          nullable: true
          description: "Цвет иконки в HEX-формате"

    CategoryType:
      type: string
      enum: [INCOME, EXPENSE]
      description: "Тип категории"

    # Common DTOs
    ProblemDetails:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          format: uri
          description: "URI идентифицирующий тип проблемы"
          example: "https://api.finapp.com/problems/validation-error"
        title:
          type: string
          description: "Краткое описание типа проблемы"
          example: "Validation Error"
        status:
          type: integer
          description: "HTTP статус код"
          example: 400
        detail:
          type: string
          description: "Детальное описание проблемы"
          example: "Поле 'amount' должно быть положительным числом"
        instance:
          type: string
          format: uri
          description: "URI идентифицирующий конкретный случай проблемы"
          example: "/api/v1/transactions/123"
        errors:
          type: array
          description: "Детали ошибок валидации"
          items:
            type: object
            properties:
              field:
                type: string
                description: "Поле с ошибкой"
                example: "amount"
              message:
                type: string
                description: "Сообщение об ошибке"
                example: "должно быть положительным числом"
              code:
                type: string
                description: "Код ошибки"
                example: "POSITIVE_NUMBER_REQUIRED"

    ErrorResponse:
      type: object
      deprecated: true
      properties:
        message:
          type: string
          description: "Сообщение об ошибке"
        code:
          type: string
          description: "Код ошибки"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []